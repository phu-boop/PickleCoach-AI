from fastapi import FastAPI, HTTPException
from pydantic import BaseModel, Field
from typing import List, Dict, Any
from dotenv import load_dotenv
from google.genai import Client
import os
import json
from collections import Counter

# T·∫£i bi·∫øn m√¥i tr∆∞·ªùng t·ª´ file .env
load_dotenv()

app = FastAPI(title="Adaptive Quiz Generator API")


class QuizRequest(BaseModel):
    learner_id: str
    topic: str
    level: str = "medium"
    # D√πng default_factory ƒë·ªÉ tr√°nh mutable default
    last_results: List[Dict[str, Any]] = Field(default_factory=list)
    learner_statistics: Dict[str, Any] = Field(default_factory=dict)


def analyze_learner_weakness(last_results: List[Dict[str, Any]]) -> Dict[str, Any]:
    """Ph√¢n t√≠ch ƒëi·ªÉm y·∫øu c·ªßa learner t·ª´ l·ªãch s·ª≠ quiz_results"""
    print(f"[ANALYZE] Processing {len(last_results)} historical results")

    if not last_results:
        return {
            "weak_topics": [],
            "difficulty_needed": "medium",
            "focus_areas": [],
            "correct_rate": 0.5,
            "total_attempts": 0,
            "needs_review": False
        }

    # Ph√¢n t√≠ch c√¢u tr·∫£ l·ªùi sai v√† ƒë√∫ng
    wrong_answers = [result for result in last_results if not result.get("is_correct", True)]
    correct_answers = [result for result in last_results if result.get("is_correct", False)]

    print(f"[ANALYZE] Wrong answers: {len(wrong_answers)}, Correct answers: {len(correct_answers)}")

    # ƒê·∫øm topics c√≥ nhi·ªÅu c√¢u sai
    wrong_topics = []
    for result in wrong_answers:
        topic = result.get("topic", "general")
        if topic:
            wrong_topics.append(topic)

    topic_weakness = Counter(wrong_topics)
    print(f"[ANALYZE] Topic weakness: {dict(topic_weakness)}")

    # T·ª∑ l·ªá ƒë√∫ng/sai
    total_questions = len(last_results)
    correct_rate = len(correct_answers) / total_questions if total_questions > 0 else 0.5

    # X√°c ƒë·ªãnh m·ª©c ƒë·ªô kh√≥ c·∫ßn thi·∫øt
    if correct_rate > 0.8:
        difficulty_needed = "hard"
        print("[ANALYZE] Learner performing excellently -> increase difficulty")
    elif correct_rate > 0.5:
        difficulty_needed = "medium"
        print("[ANALYZE] Learner at medium level -> maintain difficulty")
    else:
        difficulty_needed = "easy"
        print("[ANALYZE] Learner struggling -> decrease difficulty")

    # L·∫•y top 2 topics y·∫øu nh·∫•t
    weak_topics = [topic for topic, count in topic_weakness.most_common(2) if count > 0]
    focus_areas = weak_topics[:2]  # T·∫≠p trung v√†o 2 topics y·∫øu nh·∫•t

    analysis = {
        "weak_topics": weak_topics,
        "difficulty_needed": difficulty_needed,
        "focus_areas": focus_areas,
        "correct_rate": correct_rate,
        "total_attempts": total_questions,
        "needs_review": len(wrong_answers) > 0
    }

    print(f"[ANALYZE] Final analysis: {analysis}")
    return analysis


def generate_prompt(request: QuizRequest, weakness_analysis: Dict[str, Any]) -> str:
    """T·∫°o prompt th√¥ng minh d·ª±a tr√™n ph√¢n t√≠ch l·ªãch s·ª≠ quiz_results"""

    weak_topics = weakness_analysis.get("weak_topics", [])
    correct_rate = weakness_analysis.get("correct_rate", 0.5)
    needs_review = weakness_analysis.get("needs_review", False)
    focus_areas = weakness_analysis.get("focus_areas", [])
    difficulty_needed = weakness_analysis.get("difficulty_needed", "medium")

    # X√¢y d·ª±ng th√¥ng tin c√° nh√¢n h√≥a d·ª±a tr√™n ph√¢n t√≠ch
    personalized_info = ""

    if needs_review and weak_topics:
        personalized_info = f"""
üéØ PH√ÇN T√çCH LEARNER:
- ID: {request.learner_id}
- T·ª∑ l·ªá ƒë√∫ng g·∫ßn ƒë√¢y: {correct_rate:.1%}
- C√°c ch·ªß ƒë·ªÅ c·∫ßn c·∫£i thi·ªán: {', '.join(weak_topics)}
- T·∫≠p trung v√†o: {', '.join(focus_areas)}

üìã H∆Ø·ªöNG D·∫™N T·∫†O QUIZ TH√çCH ·ª®NG:
- 60% c√¢u h·ªèi t·∫≠p trung v√†o c√°c ch·ªß ƒë·ªÅ learner hay sai: {', '.join(focus_areas)}
- 40% c√¢u h·ªèi √¥n t·∫≠p chung v·ªÅ {request.topic}
- ƒê·ªô kh√≥ ƒë∆∞·ª£c ƒëi·ªÅu ch·ªânh: {difficulty_needed}
- Gi·∫£i th√≠ch chi ti·∫øt h∆°n ƒë·ªÉ learner hi·ªÉu s√¢u v√† kh·∫Øc ph·ª•c l·ªói
- ∆Øu ti√™n c√¢u h·ªèi th·ª±c h√†nh ƒë·ªÉ c·∫£i thi·ªán k·ªπ nƒÉng y·∫øu
"""
    elif correct_rate > 0.8:
        personalized_info = f"""
üåü PH√ÇN T√çCH LEARNER:
- ID: {request.learner_id} 
- Learner ƒëang l√†m XU·∫§T S·∫ÆC (t·ª∑ l·ªá ƒë√∫ng: {correct_rate:.1%})!
- ƒê√£ th√†nh th·∫°o c√°c ki·∫øn th·ª©c c∆° b·∫£n

üöÄ H∆Ø·ªöNG D·∫™N T·∫†O QUIZ TH√ÅCH TH·ª®C:
- TƒÉng ƒë·ªô kh√≥ l√™n m·ª©c cao ƒë·ªÉ th√°ch th·ª©c
- K·∫øt h·ª£p nhi·ªÅu k·ªπ thu·∫≠t ph·ª©c t·∫°p trong m·ªôt c√¢u h·ªèi
- Th√™m c√°c t√¨nh hu·ªëng thi ƒë·∫•u th·ª±c t·∫ø kh√≥
- C√¢u h·ªèi y√™u c·∫ßu t∆∞ duy chi·∫øn thu·∫≠t cao
"""
    else:
        personalized_info = f"""
üìö PH√ÇN T√çCH LEARNER:
- ID: {request.learner_id}
- Learner ·ªü m·ª©c ƒë·ªô ·ªïn ƒë·ªãnh (t·ª∑ l·ªá ƒë√∫ng: {correct_rate:.1%})
- C·∫ßn consolidate ki·∫øn th·ª©c v√† t·ª´ng b∆∞·ªõc n√¢ng cao

‚öñÔ∏è H∆Ø·ªöNG D·∫™N T·∫†O QUIZ C√ÇN B·∫∞NG:
- Mix c√°c m·ª©c ƒë·ªô t·ª´ d·ªÖ ƒë·∫øn trung b√¨nh (70% d·ªÖ, 30% trung b√¨nh)
- T·∫≠p trung v√†o {request.topic} v·ªõi ki·∫øn th·ª©c n·ªÅn t·∫£ng
- Th√™m m·ªôt s·ªë c√¢u √¥n t·∫≠p ki·∫øn th·ª©c c∆° b·∫£n
- Gi·∫£i th√≠ch r√µ r√†ng ƒë·ªÉ x√¢y d·ª±ng n·ªÅn t·∫£ng v·ªØng ch·∫Øc
"""

    prompt = f"""
T·∫°o 5 c√¢u h·ªèi quiz pickleball TH√îNG MINH v√† TH√çCH ·ª®NG v·ªÅ {request.topic}. 
M·ª©c ƒë·ªô y√™u c·∫ßu: {request.level}, nh∆∞ng ƒë∆∞·ª£c ƒëi·ªÅu ch·ªânh d·ª±a tr√™n ph√¢n t√≠ch learner.

{personalized_info}

üéØ REQUIREMENTS:
- C√¢u h·ªèi th·ª±c t·∫ø, √°p d·ª•ng ƒë∆∞·ª£c trong thi ƒë·∫•u pickleball th·ª±c t·∫ø
- M·ªói c√¢u h·ªèi c√≥ gi·∫£i th√≠ch chi ti·∫øt gi√∫p learner c·∫£i thi·ªán
- Ng√¥n ng·ªØ ti·∫øng Vi·ªát d·ªÖ hi·ªÉu, chuy√™n nghi·ªáp
- ƒê√°p √°n ch√≠nh x√°c v·ªÅ m·∫∑t k·ªπ thu·∫≠t pickleball
- N·∫øu learner hay sai ch·ªß ƒë·ªÅ n√†o th√¨ focus v√†o ch·ªß ƒë·ªÅ ƒë√≥

‚ö†Ô∏è Ch·ªâ tr·∫£ v·ªÅ JSON h·ª£p l·ªá theo c·∫•u tr√∫c sau, KH√îNG k√®m gi·∫£i th√≠ch hay markdown:

{{
  "questions": [
    {{
      "question_text": "C√¢u h·ªèi chi ti·∫øt v·ªÅ k·ªπ thu·∫≠t pickleball...",
      "options": [
        {{"id": 0, "text": "ƒê√°p √°n A chi ti·∫øt", "is_correct": false}},
        {{"id": 1, "text": "ƒê√°p √°n B chi ti·∫øt", "is_correct": true}},
        {{"id": 2, "text": "ƒê√°p √°n C chi ti·∫øt", "is_correct": false}},
        {{"id": 3, "text": "ƒê√°p √°n D chi ti·∫øt", "is_correct": false}}
      ],
      "explanation": "Gi·∫£i th√≠ch chi ti·∫øt t·∫°i sao ƒë√°p √°n B ƒë√∫ng, t·∫°i sao c√°c ƒë√°p √°n kh√°c sai, v√† c√°ch √°p d·ª•ng th·ª±c t·∫ø trong thi ƒë·∫•u."
    }}
  ]
}}
"""
    return prompt.strip()


def get_gemini_client() -> Client:
    # Thay th·∫ø b·∫±ng kh√≥a API TH·ª∞C S·ª∞ c·ªßa b·∫°n
    api_key = "AIzaSyB2G_ptivaXlKuOMxVkcOQ28cu_gZha2VQ" 
    return Client(api_key=api_key)

@app.post("/generate-quiz")
def generate_quiz(request: QuizRequest):
    print(f"\n{'=' * 60}")
    print(f"ü§ñ GENERATE ADAPTIVE QUIZ REQUEST")
    print(f"{'=' * 60}")
    print(f"Learner ID: {request.learner_id}")
    print(f"Topic: {request.topic}")
    print(f"Level: {request.level}")
    print(f"Historical results count: {len(request.last_results)}")

    try:
        client = get_gemini_client()

        # Ph√¢n t√≠ch learner t·ª´ l·ªãch s·ª≠ quiz_results
        weakness_analysis = analyze_learner_weakness(request.last_results)

        print(f"\nüìä LEARNER ANALYSIS SUMMARY:")
        print(f"- Total attempts: {weakness_analysis.get('total_attempts', 0)}")
        print(f"- Correct rate: {weakness_analysis.get('correct_rate', 0):.1%}")
        print(f"- Weak topics: {weakness_analysis.get('weak_topics', [])}")
        print(f"- Focus areas: {weakness_analysis.get('focus_areas', [])}")
        print(f"- Difficulty needed: {weakness_analysis.get('difficulty_needed', 'medium')}")
        print(f"- Needs review: {weakness_analysis.get('needs_review', False)}")

        # T·∫°o prompt c√° nh√¢n h√≥a
        prompt = generate_prompt(request, weakness_analysis)
        print(f"\nüìù GENERATING PROMPT... ({len(prompt)} characters)")

        # S·ª≠ d·ª•ng google-genai API
        print(f"üîÑ CALLING GEMINI API...")
        response = client.models.generate_content(
            model="gemini-1.5-flash",
            contents=prompt,
            config={
                "response_mime_type": "application/json"
            }
        )

        content = response.text
        print(f"‚úÖ GEMINI RESPONSE RECEIVED ({len(content)} characters)")

        # Parse JSON response
        quiz_data = json.loads(content)

        # Th√™m th√¥ng tin ph√¢n t√≠ch v√†o response ƒë·ªÉ frontend s·ª≠ d·ª•ng
        quiz_data["learner_analysis"] = {
            "weak_topics": weakness_analysis.get("weak_topics", []),
            "focus_areas": weakness_analysis.get("focus_areas", []),
            "correct_rate": weakness_analysis.get("correct_rate", 0.5),
            "difficulty_adjusted": weakness_analysis.get("difficulty_needed", "medium"),
            "total_attempts": weakness_analysis.get("total_attempts", 0),
            "needs_improvement": weakness_analysis.get("needs_review", False)
        }

        questions_count = len(quiz_data.get("questions", []))
        print(f"üéØ ADAPTIVE QUIZ GENERATED SUCCESSFULLY!")
        print(f"- Questions created: {questions_count}")
        print(f"- Tailored for learner: {request.learner_id}")
        print(f"{'=' * 60}\n")

        return quiz_data

    except json.JSONDecodeError as e:
        print(f"‚ùå JSON DECODE ERROR: {str(e)}")
        raise HTTPException(
            status_code=502,
            detail=f"Ph·∫£n h·ªìi kh√¥ng ph·∫£i JSON h·ª£p l·ªá t·ª´ m√¥ h√¨nh: {str(e)}",
        )
    except Exception as e:
        print(f"‚ùå EXCEPTION in generate_quiz: {str(e)}")
        import traceback
        traceback.print_exc()
        raise HTTPException(status_code=500, detail=f"L·ªói t·∫°o quiz th√≠ch ·ª©ng: {str(e)}")


# API ƒë·ªÉ debug (optional)
@app.get("/learner-analysis/{learner_id}")
def get_learner_analysis_debug(learner_id: str):
    """API ƒë·ªÉ xem ph√¢n t√≠ch learner (for debugging)"""
    return {
        "message": f"Analysis endpoint for learner {learner_id}",
        "note": "This endpoint can be used to debug learner analysis"
    }


@app.get("/health")
def health_check():
    """Health check endpoint"""
    return {"status": "healthy", "service": "Adaptive Quiz Generator"}


if __name__ == "__main__":
    import uvicorn

    print("üöÄ Starting Adaptive Quiz Generator API Server...")
    uvicorn.run(app, host="0.0.0.0", port=8001)